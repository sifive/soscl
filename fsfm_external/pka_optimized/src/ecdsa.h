#ifndef ECDSA_DEFS
#define ECDSA_DEFS

#define ECDSA_SECP256R1 1
#define ECDSA_SECP256K1 2
#define ECDSA_SECP384R1 3
#define ECDSA_SECP256R1_BITSIZE 256
#define ECDSA_SECP256K1_BITSIZE 256
#define ECDSA_SECP384R1_BITSIZE 384
#define ECDSA_SECP256R1_BYTESIZE 32
#define ECDSA_SECP256K1_BYTESIZE 32
#define ECDSA_SECP384R1_BYTESIZE 48
#define ECDSA_MAX_BYTES 48
#define SIFIVE_ECDSA_MESSAGE_DIGEST 0
#define SIFIVE_ECDSA_MESSAGE 1

struct signature_type {
  uint8_t *r;
  uint8_t *s;
};


//p256r1

//p=0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff
static const uint8_t ECDSA_SECP256R1_P[]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};
 static const uint8_t ECDSA_SECP256R1_P_MINUS2[ECDSA_SECP256R1_BYTESIZE] = {
  0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
};
//n=0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551
static const uint8_t ECDSA_SECP256R1_N[]={0x51,0x25,0x63,0xFC,0xC2,0xCA,0xB9,0xF3,0x84,0x9E,0x17,0xA7,0xAD,0xFA,0xE6,0xBC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};
static const uint8_t ECDSA_SECP256R1_N_MINUS2[]={0x4F,0x25,0x63,0xFC,0xC2,0xCA,0xB9,0xF3,0x84,0x9E,0x17,0xA7,0xAD,0xFA,0xE6,0xBC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};

//xg=0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296
//yg=0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5

static const uint8_t ECDSA_SECP256R1_XG[]={0x96,0xC2,0x98,0xD8,0x45,0x39,0xA1,0xF4,0xA0,0x33,0xEB,0x2D,0x81,0x7D,0x03,0x77,0xF2,0x40,0xA4,0x63,0xE5,0xE6,0xBC,0xF8,0x47,0x42,0x2C,0xE1,0xF2,0xD1,0x17,0x6B};
static const uint8_t ECDSA_SECP256R1_YG[]={0xF5,0x51,0xBF,0x37,0x68,0x40,0xB6,0xCB,0xCE,0x5E,0x31,0x6B,0x57,0x33,0xCE,0x2B,0x16,0x9E,0x0F,0x7C,0x4A,0xEB,0xE7,0x8E,0x9B,0x7F,0x1A,0xFE,0xE2,0x42,0xE3,0x4F};

//inverse of 2
static const uint8_t ECDSA_SECP256R1_INV2[]={  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f};

//p384r1
//p=0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff
static const uint8_t ECDSA_SECP384R1_P[]={0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static const uint8_t ECDSA_SECP384R1_P_MINUS2[]={0xfd,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

//n=0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973
static const uint8_t ECDSA_SECP384R1_N[]={0x73,0x29,0xc5,0xcc,0x6a,0x19,0xec,0xec,0x7a,0xa7,0xb0,0x48,0xb2,0x0d,0x1a,0x58,0xdf,0x2d,0x37,0xf4,0x81,0x4d,0x63,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
static const uint8_t ECDSA_SECP384R1_N_MINUS2[]={0x71,0x29,0xc5,0xcc,0x6a,0x19,0xec,0xec,0x7a,0xa7,0xb0,0x48,0xb2,0x0d,0x1a,0x58,0xdf,0x2d,0x37,0xf4,0x81,0x4d,0x63,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

//xg=aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7
static const uint8_t ECDSA_SECP384R1_XG[]={0xb7,0x0a,0x76,0x72,0x38,0x5e,0x54,0x3a,0x6c,0x29,0x55,0xbf,0x5d,0xf2,0x02,0x55,0x38,0x2a,0x54,0x82,0xe0,0x41,0xf7,0x59,0x98,0x9b,0xa7,0x8b,0x62,0x3b,0x1d,0x6e,0x74,0xad,0x20,0xf3,0x1e,0xc7,0xb1,0x8e,0x37,0x05,0x8b,0xbe,0x22,0xca,0x87,0xaa};

//yg=3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f
static const uint8_t ECDSA_SECP384R1_YG[]={0x5f,0x0e,0xea,0x90,0x7c,0x1d,0x43,0x7a,0x9d,0x81,0x7e,0x1d,0xce,0xb1,0x60,0x0a,0xc0,0xb8,0xf0,0xb5,0x13,0x31,0xda,0xe9,0x7c,0x14,0x9a,0x28,0xbd,0x1d,0xf4,0xf8,0x29,0xdc,0x92,0x92,0xbf,0x98,0x9e,0x5d,0x6f,0x2c,0x26,0x96,0x4a,0xde,0x17,0x36};

static const uint8_t ECDSA_SECP384R1_INV2[]={0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f};

int ecdsa_verification(struct signature_type *signature,uint8_t *digest,int digest_bitsize,uint8_t *message,int message_length,struct affine_point *public_key, struct curve_type *curve,int configuration);

#endif //ECDSA_DEFS

